// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: taehoio/idl/services/baemincrypto/v1/baemincrypto.proto

package baemincryptov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BaemincryptoServiceClient is the client API for BaemincryptoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaemincryptoServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	EncryptUserBaedalHeaderValue(ctx context.Context, in *EncryptUserBaedalHeaderValueRequest, opts ...grpc.CallOption) (*EncryptUserBaedalHeaderValueResponse, error)
	DecryptUserBaedalHeaderValue(ctx context.Context, in *DecryptUserBaedalHeaderValueRequest, opts ...grpc.CallOption) (*DecryptUserBaedalHeaderValueResponse, error)
}

type baemincryptoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaemincryptoServiceClient(cc grpc.ClientConnInterface) BaemincryptoServiceClient {
	return &baemincryptoServiceClient{cc}
}

func (c *baemincryptoServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/taehoio.idl.services.baemincrypto.v1.BaemincryptoService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baemincryptoServiceClient) EncryptUserBaedalHeaderValue(ctx context.Context, in *EncryptUserBaedalHeaderValueRequest, opts ...grpc.CallOption) (*EncryptUserBaedalHeaderValueResponse, error) {
	out := new(EncryptUserBaedalHeaderValueResponse)
	err := c.cc.Invoke(ctx, "/taehoio.idl.services.baemincrypto.v1.BaemincryptoService/EncryptUserBaedalHeaderValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baemincryptoServiceClient) DecryptUserBaedalHeaderValue(ctx context.Context, in *DecryptUserBaedalHeaderValueRequest, opts ...grpc.CallOption) (*DecryptUserBaedalHeaderValueResponse, error) {
	out := new(DecryptUserBaedalHeaderValueResponse)
	err := c.cc.Invoke(ctx, "/taehoio.idl.services.baemincrypto.v1.BaemincryptoService/DecryptUserBaedalHeaderValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaemincryptoServiceServer is the server API for BaemincryptoService service.
// All implementations should embed UnimplementedBaemincryptoServiceServer
// for forward compatibility
type BaemincryptoServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	EncryptUserBaedalHeaderValue(context.Context, *EncryptUserBaedalHeaderValueRequest) (*EncryptUserBaedalHeaderValueResponse, error)
	DecryptUserBaedalHeaderValue(context.Context, *DecryptUserBaedalHeaderValueRequest) (*DecryptUserBaedalHeaderValueResponse, error)
}

// UnimplementedBaemincryptoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBaemincryptoServiceServer struct {
}

func (UnimplementedBaemincryptoServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedBaemincryptoServiceServer) EncryptUserBaedalHeaderValue(context.Context, *EncryptUserBaedalHeaderValueRequest) (*EncryptUserBaedalHeaderValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptUserBaedalHeaderValue not implemented")
}
func (UnimplementedBaemincryptoServiceServer) DecryptUserBaedalHeaderValue(context.Context, *DecryptUserBaedalHeaderValueRequest) (*DecryptUserBaedalHeaderValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptUserBaedalHeaderValue not implemented")
}

// UnsafeBaemincryptoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaemincryptoServiceServer will
// result in compilation errors.
type UnsafeBaemincryptoServiceServer interface {
	mustEmbedUnimplementedBaemincryptoServiceServer()
}

func RegisterBaemincryptoServiceServer(s grpc.ServiceRegistrar, srv BaemincryptoServiceServer) {
	s.RegisterService(&BaemincryptoService_ServiceDesc, srv)
}

func _BaemincryptoService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaemincryptoServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taehoio.idl.services.baemincrypto.v1.BaemincryptoService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaemincryptoServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaemincryptoService_EncryptUserBaedalHeaderValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptUserBaedalHeaderValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaemincryptoServiceServer).EncryptUserBaedalHeaderValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taehoio.idl.services.baemincrypto.v1.BaemincryptoService/EncryptUserBaedalHeaderValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaemincryptoServiceServer).EncryptUserBaedalHeaderValue(ctx, req.(*EncryptUserBaedalHeaderValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaemincryptoService_DecryptUserBaedalHeaderValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptUserBaedalHeaderValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaemincryptoServiceServer).DecryptUserBaedalHeaderValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taehoio.idl.services.baemincrypto.v1.BaemincryptoService/DecryptUserBaedalHeaderValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaemincryptoServiceServer).DecryptUserBaedalHeaderValue(ctx, req.(*DecryptUserBaedalHeaderValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BaemincryptoService_ServiceDesc is the grpc.ServiceDesc for BaemincryptoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaemincryptoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taehoio.idl.services.baemincrypto.v1.BaemincryptoService",
	HandlerType: (*BaemincryptoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _BaemincryptoService_HealthCheck_Handler,
		},
		{
			MethodName: "EncryptUserBaedalHeaderValue",
			Handler:    _BaemincryptoService_EncryptUserBaedalHeaderValue_Handler,
		},
		{
			MethodName: "DecryptUserBaedalHeaderValue",
			Handler:    _BaemincryptoService_DecryptUserBaedalHeaderValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taehoio/idl/services/baemincrypto/v1/baemincrypto.proto",
}
