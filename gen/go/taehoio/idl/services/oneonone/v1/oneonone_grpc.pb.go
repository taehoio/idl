// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: taehoio/idl/services/oneonone/v1/oneonone.proto

package oneononev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OneononeServiceClient is the client API for OneononeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OneononeServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	ListQuestionsByCategoryId(ctx context.Context, in *ListQuestionsByCategoryIdRequest, opts ...grpc.CallOption) (*ListQuestionsByCategoryIdResponse, error)
	GetRandomQuestion(ctx context.Context, in *GetRandomQuestionRequest, opts ...grpc.CallOption) (*GetRandomQuestionResponse, error)
	GetRandomQuestionByCategoryId(ctx context.Context, in *GetRandomQuestionByCategoryIdRequest, opts ...grpc.CallOption) (*GetRandomQuestionByCategoryIdResponse, error)
}

type oneononeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOneononeServiceClient(cc grpc.ClientConnInterface) OneononeServiceClient {
	return &oneononeServiceClient{cc}
}

func (c *oneononeServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/taehoio.idl.services.oneonone.v1.OneononeService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneononeServiceClient) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, "/taehoio.idl.services.oneonone.v1.OneononeService/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneononeServiceClient) ListQuestionsByCategoryId(ctx context.Context, in *ListQuestionsByCategoryIdRequest, opts ...grpc.CallOption) (*ListQuestionsByCategoryIdResponse, error) {
	out := new(ListQuestionsByCategoryIdResponse)
	err := c.cc.Invoke(ctx, "/taehoio.idl.services.oneonone.v1.OneononeService/ListQuestionsByCategoryId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneononeServiceClient) GetRandomQuestion(ctx context.Context, in *GetRandomQuestionRequest, opts ...grpc.CallOption) (*GetRandomQuestionResponse, error) {
	out := new(GetRandomQuestionResponse)
	err := c.cc.Invoke(ctx, "/taehoio.idl.services.oneonone.v1.OneononeService/GetRandomQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneononeServiceClient) GetRandomQuestionByCategoryId(ctx context.Context, in *GetRandomQuestionByCategoryIdRequest, opts ...grpc.CallOption) (*GetRandomQuestionByCategoryIdResponse, error) {
	out := new(GetRandomQuestionByCategoryIdResponse)
	err := c.cc.Invoke(ctx, "/taehoio.idl.services.oneonone.v1.OneononeService/GetRandomQuestionByCategoryId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OneononeServiceServer is the server API for OneononeService service.
// All implementations should embed UnimplementedOneononeServiceServer
// for forward compatibility
type OneononeServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	ListQuestionsByCategoryId(context.Context, *ListQuestionsByCategoryIdRequest) (*ListQuestionsByCategoryIdResponse, error)
	GetRandomQuestion(context.Context, *GetRandomQuestionRequest) (*GetRandomQuestionResponse, error)
	GetRandomQuestionByCategoryId(context.Context, *GetRandomQuestionByCategoryIdRequest) (*GetRandomQuestionByCategoryIdResponse, error)
}

// UnimplementedOneononeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOneononeServiceServer struct {
}

func (UnimplementedOneononeServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedOneononeServiceServer) ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedOneononeServiceServer) ListQuestionsByCategoryId(context.Context, *ListQuestionsByCategoryIdRequest) (*ListQuestionsByCategoryIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestionsByCategoryId not implemented")
}
func (UnimplementedOneononeServiceServer) GetRandomQuestion(context.Context, *GetRandomQuestionRequest) (*GetRandomQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomQuestion not implemented")
}
func (UnimplementedOneononeServiceServer) GetRandomQuestionByCategoryId(context.Context, *GetRandomQuestionByCategoryIdRequest) (*GetRandomQuestionByCategoryIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomQuestionByCategoryId not implemented")
}

// UnsafeOneononeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OneononeServiceServer will
// result in compilation errors.
type UnsafeOneononeServiceServer interface {
	mustEmbedUnimplementedOneononeServiceServer()
}

func RegisterOneononeServiceServer(s grpc.ServiceRegistrar, srv OneononeServiceServer) {
	s.RegisterService(&OneononeService_ServiceDesc, srv)
}

func _OneononeService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneononeServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taehoio.idl.services.oneonone.v1.OneononeService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneononeServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneononeService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneononeServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taehoio.idl.services.oneonone.v1.OneononeService/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneononeServiceServer).ListCategories(ctx, req.(*ListCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneononeService_ListQuestionsByCategoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionsByCategoryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneononeServiceServer).ListQuestionsByCategoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taehoio.idl.services.oneonone.v1.OneononeService/ListQuestionsByCategoryId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneononeServiceServer).ListQuestionsByCategoryId(ctx, req.(*ListQuestionsByCategoryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneononeService_GetRandomQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneononeServiceServer).GetRandomQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taehoio.idl.services.oneonone.v1.OneononeService/GetRandomQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneononeServiceServer).GetRandomQuestion(ctx, req.(*GetRandomQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneononeService_GetRandomQuestionByCategoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomQuestionByCategoryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneononeServiceServer).GetRandomQuestionByCategoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taehoio.idl.services.oneonone.v1.OneononeService/GetRandomQuestionByCategoryId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneononeServiceServer).GetRandomQuestionByCategoryId(ctx, req.(*GetRandomQuestionByCategoryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OneononeService_ServiceDesc is the grpc.ServiceDesc for OneononeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OneononeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taehoio.idl.services.oneonone.v1.OneononeService",
	HandlerType: (*OneononeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _OneononeService_HealthCheck_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _OneononeService_ListCategories_Handler,
		},
		{
			MethodName: "ListQuestionsByCategoryId",
			Handler:    _OneononeService_ListQuestionsByCategoryId_Handler,
		},
		{
			MethodName: "GetRandomQuestion",
			Handler:    _OneononeService_GetRandomQuestion_Handler,
		},
		{
			MethodName: "GetRandomQuestionByCategoryId",
			Handler:    _OneononeService_GetRandomQuestionByCategoryId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taehoio/idl/services/oneonone/v1/oneonone.proto",
}
