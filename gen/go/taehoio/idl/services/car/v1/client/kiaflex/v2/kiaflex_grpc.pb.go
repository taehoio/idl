// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: taehoio/idl/services/car/v1/client/kiaflex/v2/kiaflex.proto

package kiaflexv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KiaflexServiceClient is the client API for KiaflexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KiaflexServiceClient interface {
	ListProductGroups(ctx context.Context, in *ListProductGroupsRequest, opts ...grpc.CallOption) (*ListProductGroupsResponse, error)
	ListCategoryProducts(ctx context.Context, in *ListCategoryProductsRequest, opts ...grpc.CallOption) (*ListCategoryProductsResponse, error)
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
}

type kiaflexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKiaflexServiceClient(cc grpc.ClientConnInterface) KiaflexServiceClient {
	return &kiaflexServiceClient{cc}
}

func (c *kiaflexServiceClient) ListProductGroups(ctx context.Context, in *ListProductGroupsRequest, opts ...grpc.CallOption) (*ListProductGroupsResponse, error) {
	out := new(ListProductGroupsResponse)
	err := c.cc.Invoke(ctx, "/taehoio.idl.services.car.v1.client.kiaflex.v2.KiaflexService/ListProductGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiaflexServiceClient) ListCategoryProducts(ctx context.Context, in *ListCategoryProductsRequest, opts ...grpc.CallOption) (*ListCategoryProductsResponse, error) {
	out := new(ListCategoryProductsResponse)
	err := c.cc.Invoke(ctx, "/taehoio.idl.services.car.v1.client.kiaflex.v2.KiaflexService/ListCategoryProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiaflexServiceClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, "/taehoio.idl.services.car.v1.client.kiaflex.v2.KiaflexService/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KiaflexServiceServer is the server API for KiaflexService service.
// All implementations should embed UnimplementedKiaflexServiceServer
// for forward compatibility
type KiaflexServiceServer interface {
	ListProductGroups(context.Context, *ListProductGroupsRequest) (*ListProductGroupsResponse, error)
	ListCategoryProducts(context.Context, *ListCategoryProductsRequest) (*ListCategoryProductsResponse, error)
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
}

// UnimplementedKiaflexServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKiaflexServiceServer struct {
}

func (UnimplementedKiaflexServiceServer) ListProductGroups(context.Context, *ListProductGroupsRequest) (*ListProductGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductGroups not implemented")
}
func (UnimplementedKiaflexServiceServer) ListCategoryProducts(context.Context, *ListCategoryProductsRequest) (*ListCategoryProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategoryProducts not implemented")
}
func (UnimplementedKiaflexServiceServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}

// UnsafeKiaflexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KiaflexServiceServer will
// result in compilation errors.
type UnsafeKiaflexServiceServer interface {
	mustEmbedUnimplementedKiaflexServiceServer()
}

func RegisterKiaflexServiceServer(s grpc.ServiceRegistrar, srv KiaflexServiceServer) {
	s.RegisterService(&KiaflexService_ServiceDesc, srv)
}

func _KiaflexService_ListProductGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiaflexServiceServer).ListProductGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taehoio.idl.services.car.v1.client.kiaflex.v2.KiaflexService/ListProductGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiaflexServiceServer).ListProductGroups(ctx, req.(*ListProductGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiaflexService_ListCategoryProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiaflexServiceServer).ListCategoryProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taehoio.idl.services.car.v1.client.kiaflex.v2.KiaflexService/ListCategoryProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiaflexServiceServer).ListCategoryProducts(ctx, req.(*ListCategoryProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiaflexService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiaflexServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taehoio.idl.services.car.v1.client.kiaflex.v2.KiaflexService/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiaflexServiceServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KiaflexService_ServiceDesc is the grpc.ServiceDesc for KiaflexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KiaflexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taehoio.idl.services.car.v1.client.kiaflex.v2.KiaflexService",
	HandlerType: (*KiaflexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProductGroups",
			Handler:    _KiaflexService_ListProductGroups_Handler,
		},
		{
			MethodName: "ListCategoryProducts",
			Handler:    _KiaflexService_ListCategoryProducts_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _KiaflexService_ListProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taehoio/idl/services/car/v1/client/kiaflex/v2/kiaflex.proto",
}
